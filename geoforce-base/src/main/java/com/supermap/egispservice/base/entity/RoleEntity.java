package com.supermap.egispservice.base.entity;

// Generated 2014-9-4 11:41:47 by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;

/**
 * EgispRssRole generated by hbm2java
 */
@Entity
@Table(name = "EGISP_RSS_ROLE")
public class RoleEntity extends IdEntity implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private String name;
	private RoleStatusEntity status = new RoleStatusEntity();
	private String remarks;
	private Set<PrivlegeEntity> privileges = new HashSet<PrivlegeEntity>();
	
	
	@SuppressWarnings("unchecked")
	@Transient
	public String[] getPrivilegeCodes(){
		String[] codes = null;
		if(null != this.privileges && this.privileges.size() > 0){
			codes = new String[this.privileges.size()];
			Iterator iterator = this.privileges.iterator();
			int index = 0;
			while(iterator.hasNext()){
				PrivlegeEntity pe = (PrivlegeEntity) iterator.next();
				codes[index++] = pe.getCode();
			}
		}
		return codes;
	}
	
	@SuppressWarnings("unchecked")
	@Transient
	public String[] getPrivilegeIds(){
		String[] ids = null;
		if(null != this.privileges && this.privileges.size() > 0){
			ids = new String[this.privileges.size()];
			Iterator iterator = this.privileges.iterator();
			int index = 0;
			while(iterator.hasNext()){
				PrivlegeEntity pe = (PrivlegeEntity) iterator.next();
				ids[index++] = pe.getId();
			}
		}
		return ids;
	}
	
	public void clearPrivileges(){
		if(this.privileges != null && this.privileges.size() > 0){
			this.privileges.clear();
		}
	}
	
	public void addPrivilege(PrivlegeEntity pe ){
		if(!privileges.contains(pe)){
			privileges.add(pe);
		}
	}
	
	public void removePrivilege(PrivlegeEntity pe){
		if(privileges.contains(pe)){
			privileges.remove(pe);
		}
	}
	
	@ManyToMany(cascade = { CascadeType.REFRESH }, fetch = FetchType.EAGER)
	@JoinTable(name = "EGISP_RSS_ROLE_PRIVILEGE", inverseJoinColumns = @JoinColumn(name = "PRI_ID"), joinColumns = @JoinColumn(name = "ROLE_ID"))
	public Set<PrivlegeEntity> getPrivileges() {
		return privileges;
	}

	public void setPrivileges(Set<PrivlegeEntity> privileges) {
		this.privileges = privileges;
	}
	@Column(name="name",length=50)
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	
	@ManyToOne(cascade={CascadeType.REFRESH})
	@JoinColumn(name="status_id",nullable=false)
	public RoleStatusEntity getStatus() {
		return status;
	}

	public void setStatus(RoleStatusEntity status) {
		this.status = status;
	}
	@Column(name="remark",length=500)
	public String getRemarks() {
		return remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		RoleEntity other = (RoleEntity) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}


}
