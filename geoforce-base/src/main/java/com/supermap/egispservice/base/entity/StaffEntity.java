package com.supermap.egispservice.base.entity;

// Generated 2014-9-4 11:41:47 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.supermap.egispservice.base.constants.EbossStatusConstants;


/**
 * EgispRssStaff generated by hbm2java
 */
@Entity
@Table(name = "EGISP_RSS_STAFF", catalog = "egisp_dev")
public class StaffEntity extends IdEntity implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * 
	 */
	// 用户名
		
		private String username;
		private String password;
		private String salt;
		// 真实姓名
		private String realName;
		private String position;
		private  String sex;
		private String mobilePhone;
		private String phone;
		private String email;
		private String remarks;
		private String department;
		private Date createTime = new Date();
		private Date updateTime;
		private StaffStatusEntity status;
		
		private Set<RoleEntity> roles = new HashSet<RoleEntity>();
		
		public void addRole(RoleEntity role){
			if(!roles.contains(role)){
				roles.add(role);
			}
		}
		
		public void clearRoles(){
			if(this.roles != null && this.roles.size() > 0){
				this.roles.clear();
			}
		}
		
		@Transient
		public Map<String,Map<String,String>> getRoleInfos(){
			Map<String,Map<String,String>> roleInfos = null;
			if(null != this.roles && roles.size() > 0){
				roleInfos = new HashMap<String,Map<String,String>>();
				Iterator iterator = this.roles.iterator();
				while(iterator.hasNext()){
					RoleEntity re = (RoleEntity) iterator.next();
					String roleName = re.getName();
					Map<String,String> map = new HashMap<String,String>();
					Set<PrivlegeEntity> sets = re.getPrivileges();
					if(sets != null && sets.size() > 0){
						Iterator iterator2 = sets.iterator();
						while(iterator2.hasNext()){
							PrivlegeEntity pe = (PrivlegeEntity) iterator2.next();
							// 只返回使用中的权限
							if(EbossStatusConstants.PRIVILEGE_STATUS_USING.equals(pe.getStatus().getStatus())){
								map.put(pe.getCode(), pe.getUrl());
							}
						}
					}
					roleInfos.put(roleName, map);
				}
			}
			return roleInfos;
		}
		
		/**
		 * 
		 * <p>Title ：getPermissions</p>
		 * Description：获取员工所拥有的权限
		 * @return key：code, value : url
		 * Author：Huasong Huang
		 * CreateTime：2014-8-22 上午11:30:09
		 */
		@Transient
		public Map<String,String> getPermissions(){
			Map<String,String> map = null;
			if(this.roles != null && this.roles.size() > 0){
				map = new HashMap<String,String>();
				Iterator iterator = this.roles.iterator();
				while(iterator.hasNext()){
					RoleEntity re = (RoleEntity) iterator.next();
					Set<PrivlegeEntity> sets = re.getPrivileges();
					if(sets != null && sets.size() > 0){
						Iterator iterator2 = sets.iterator();
						while(iterator2.hasNext()){
							PrivlegeEntity pe = (PrivlegeEntity) iterator2.next();
							// 只返回使用中的权限
							if(EbossStatusConstants.PRIVILEGE_STATUS_USING.equals(pe.getStatus().getStatus())){
								map.put(pe.getCode(), pe.getUrl());
							}
						}
					}
				}
			}
			return map;
		}
		
		
		public void removeRole(RoleEntity role){
			if(roles.contains(role)){
				roles.remove(role);
			}
		}
		
		@ManyToMany(cascade = { CascadeType.REFRESH }, fetch = FetchType.EAGER)
		@JoinTable(name = "EGISP_RSS_STAFF_ROLE", inverseJoinColumns = @JoinColumn(name = "role_id"), joinColumns = @JoinColumn(name = "staff_id"))
		public Set<RoleEntity> getRoles() {
			return roles;
		}
		public void setRoles(Set<RoleEntity> roles) {
			this.roles = roles;
		}
		
		@Column(name="username",length=50)
		public String getUsername() {
			return username;
		}
		public void setUsername(String username) {
			this.username = username;
		}
		
		@Column(name="password",length=100)
		public String getPassword() {
			return password;
		}
		public void setPassword(String password) {
			this.password = password;
		}
		
		@Column(name="realname",length=50)
		public String getRealName() {
			return realName;
		}
		public void setRealName(String realName) {
			this.realName = realName;
		}
		
		@Column(name="position",length=12)
		public String getPosition() {
			return position;
		}

		public void setPosition(String position) {
			this.position = position;
		}

		@Column(name="sex",length=1)
		public String getSex() {
			return sex;
		}

		public void setSex(String sex) {
			this.sex = sex;
		}

		@Column(name="mobilephone",length=15)
		public String getMobilePhone() {
			return mobilePhone;
		}
		public void setMobilePhone(String mobilePhone) {
			this.mobilePhone = mobilePhone;
		}
		
		@Column(name="telephone",length=15)
		public String getPhone() {
			return phone;
		}
		public void setPhone(String phone) {
			this.phone = phone;
		}
		
		@Column(name="email",length=50)
		public String getEmail() {
			return email;
		}
		public void setEmail(String email) {
			this.email = email;
		}
		
		@Column(name="remark",length=500)
		public String getRemarks() {
			return remarks;
		}
		public void setRemarks(String remarks) {
			this.remarks = remarks;
		}
		
		@Column(name="department",length=50)
		public String getDepartment() {
			return department;
		}
		public void setDepartment(String department) {
			this.department = department;
		}


		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((id == null) ? 0 : id.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			StaffEntity other = (StaffEntity) obj;
			if (id == null) {
				if (other.id != null)
					return false;
			} else if (!id.equals(other.id))
				return false;
			return true;
		}

		@Column(name="CREATE_TIME")
		@Temporal(TemporalType.TIMESTAMP)
		public Date getCreateTime() {
			return createTime;
		}

		public void setCreateTime(Date createTime) {
			this.createTime = createTime;
		}

		@Column(name="UPDATE_TIME")
		@Temporal(TemporalType.TIMESTAMP)
		public Date getUpdateTime() {
			return updateTime;
		}

		public void setUpdateTime(Date updateTime) {
			this.updateTime = updateTime;
		}

		@Column(name="salt",length=100)
		public String getSalt() {
			return salt;
		}

		public void setSalt(String salt) {
			this.salt = salt;
		}

		@ManyToOne(cascade={CascadeType.REFRESH})
		@JoinColumn(name="status_id")
		public StaffStatusEntity getStatus() {
			return status;
		}

		public void setStatus(StaffStatusEntity status) {
			this.status = status;
		}
		

}
